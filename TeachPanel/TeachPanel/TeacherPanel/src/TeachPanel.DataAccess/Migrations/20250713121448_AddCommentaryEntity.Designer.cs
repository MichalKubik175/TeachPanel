// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeachPanel.DataAccess.Connection;

#nullable disable

namespace TeachPanel.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250713121448_AddCommentaryEntity")]
    partial class AddCommentaryEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_brands");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_brands_name");

                    b.ToTable("brands", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Commentary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_commentaries");

                    b.ToTable("commentaries", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_groups_name");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("answer");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("TEXT")
                        .HasColumnName("questionnaire_id");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.HasIndex("QuestionnaireId")
                        .HasDatabaseName("ix_questions_questionnaire_id");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Questionnaire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_questionnaires");

                    b.ToTable("questionnaires", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("DeactivationReason")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("deactivation_reason");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<DateTimeOffset>("ExpiresAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("expires_at_utc");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("jwt_id");

                    b.Property<string>("RefreshTokenHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("refresh_token_hash");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("JwtId")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_jwt_id");

                    b.HasIndex("RefreshTokenHash")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_refresh_token_hash");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT")
                        .HasColumnName("group_id");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_students");

                    b.HasIndex("FullName")
                        .HasDatabaseName("ix_students_full_name");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_students_group_id");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("role");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Question", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.Questionnaire", "Questionnaire")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_questionnaires_questionnaire_id");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.RefreshToken", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Student", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_students_groups_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Questionnaire", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
