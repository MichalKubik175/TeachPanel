// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeachPanel.DataAccess.Connection;

#nullable disable

namespace TeachPanel.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250922143438_AddCurrentQuestionNumberToSession")]
    partial class AddCurrentQuestionNumberToSession
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_brands");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_brands_name");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_brands_user_id");

                    b.ToTable("brands", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Commentary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_commentaries");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_commentaries_user_id");

                    b.ToTable("commentaries", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_groups_name");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_groups_user_id");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("answer");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("TEXT")
                        .HasColumnName("questionnaire_id");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.HasIndex("QuestionnaireId")
                        .HasDatabaseName("ix_questions_questionnaire_id");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Questionnaire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_questionnaires");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_questionnaires_is_deleted");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_questionnaires_user_id");

                    b.ToTable("questionnaires", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<string>("DeactivationReason")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("deactivation_reason");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<DateTimeOffset>("ExpiresAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("expires_at_utc");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("jwt_id");

                    b.Property<string>("RefreshTokenHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("refresh_token_hash");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("JwtId")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_jwt_id");

                    b.HasIndex("RefreshTokenHash")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_refresh_token_hash");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("CommentaryId")
                        .HasColumnType("TEXT")
                        .HasColumnName("commentary_id");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<int?>("CurrentQuestionNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("current_question_number");

                    b.Property<Guid?>("CurrentSelectedQuestionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("current_selected_question_id");

                    b.Property<Guid?>("CurrentSelectedSessionStudentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("current_selected_session_student_id");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid?>("QuestionnaireId")
                        .HasColumnType("TEXT")
                        .HasColumnName("questionnaire_id");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("state");

                    b.Property<Guid>("TableLayoutId")
                        .HasColumnType("TEXT")
                        .HasColumnName("table_layout_id");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_sessions");

                    b.HasIndex("CommentaryId")
                        .HasDatabaseName("ix_sessions_commentary_id");

                    b.HasIndex("QuestionnaireId")
                        .HasDatabaseName("ix_sessions_questionnaire_id");

                    b.HasIndex("State")
                        .HasDatabaseName("ix_sessions_state");

                    b.HasIndex("TableLayoutId")
                        .HasDatabaseName("ix_sessions_table_layout_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_sessions_user_id");

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.SessionHomeworkAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("question_id");

                    b.Property<Guid>("SessionHomeworkStudentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("session_homework_student_id");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("state");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_session_homework_answers");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_session_homework_answers_question_id");

                    b.HasIndex("SessionHomeworkStudentId")
                        .HasDatabaseName("ix_session_homework_answers_session_homework_student_id");

                    b.HasIndex("State")
                        .HasDatabaseName("ix_session_homework_answers_state");

                    b.ToTable("session_homework_answers", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.SessionHomeworkStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("session_id");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("student_id");

                    b.Property<int>("TableNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("table_number");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_session_homework_students");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_session_homework_students_session_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_session_homework_students_student_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_session_homework_students_user_id");

                    b.HasIndex("SessionId", "StudentId")
                        .IsUnique()
                        .HasDatabaseName("ix_session_homework_students_session_id_student_id");

                    b.ToTable("session_homework_students", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.SessionRegularAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid>("SessionRegularStudentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("session_regular_student_id");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("state");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_session_regular_answers");

                    b.HasIndex("SessionRegularStudentId")
                        .HasDatabaseName("ix_session_regular_answers_session_regular_student_id");

                    b.HasIndex("State")
                        .HasDatabaseName("ix_session_regular_answers_state");

                    b.ToTable("session_regular_answers", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.SessionRegularStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("session_id");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("student_id");

                    b.Property<int>("TableNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("table_number");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_session_regular_students");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_session_regular_students_session_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_session_regular_students_student_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_session_regular_students_user_id");

                    b.HasIndex("SessionId", "StudentId")
                        .IsUnique()
                        .HasDatabaseName("ix_session_regular_students_session_id_student_id");

                    b.ToTable("session_regular_students", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("TEXT")
                        .HasColumnName("brand_id");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT")
                        .HasColumnName("group_id");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_students");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("ix_students_brand_id");

                    b.HasIndex("FullName")
                        .HasDatabaseName("ix_students_full_name");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_students_group_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_students_user_id");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.StudentVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_present");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("student_id");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<DateOnly>("VisitDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("visit_date");

                    b.HasKey("Id")
                        .HasName("pk_student_visits");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_student_visits_user_id");

                    b.HasIndex("StudentId", "VisitDate", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_student_visits_student_date_user");

                    b.ToTable("student_visits", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.TableLayout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtLocal")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_local");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Rows")
                        .HasColumnType("TEXT")
                        .HasColumnName("rows");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_table_layouts");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_table_layouts_user_id");

                    b.ToTable("table_layouts", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("role");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Brand", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_brands_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Commentary", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_commentaries_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Group", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_groups_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Question", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.Questionnaire", "Questionnaire")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_questionnaires_questionnaire_id");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Questionnaire", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_questionnaires_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.RefreshToken", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Session", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.Commentary", "Commentary")
                        .WithMany()
                        .HasForeignKey("CommentaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sessions_commentaries_commentary_id");

                    b.HasOne("TeachPanel.Core.Models.Entities.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sessions_questionnaires_questionnaire_id");

                    b.HasOne("TeachPanel.Core.Models.Entities.TableLayout", "TableLayout")
                        .WithMany()
                        .HasForeignKey("TableLayoutId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sessions_table_layouts_table_layout_id");

                    b.HasOne("TeachPanel.Core.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sessions_users_user_id");

                    b.Navigation("Commentary");

                    b.Navigation("Questionnaire");

                    b.Navigation("TableLayout");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.SessionHomeworkAnswer", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_session_homework_answers_questions_question_id");

                    b.HasOne("TeachPanel.Core.Models.Entities.SessionHomeworkStudent", "SessionHomeworkStudent")
                        .WithMany()
                        .HasForeignKey("SessionHomeworkStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_session_homework_answers_session_homework_students_session_homework_student_id");

                    b.Navigation("Question");

                    b.Navigation("SessionHomeworkStudent");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.SessionHomeworkStudent", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.Session", "Session")
                        .WithMany("SessionHomeworkStudents")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_session_homework_students_sessions_session_id");

                    b.HasOne("TeachPanel.Core.Models.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_session_homework_students_students_student_id");

                    b.HasOne("TeachPanel.Core.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_session_homework_students_users_user_id");

                    b.Navigation("Session");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.SessionRegularAnswer", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.SessionRegularStudent", "SessionRegularStudent")
                        .WithMany()
                        .HasForeignKey("SessionRegularStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_session_regular_answers_session_regular_students_session_regular_student_id");

                    b.Navigation("SessionRegularStudent");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.SessionRegularStudent", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.Session", "Session")
                        .WithMany("SessionRegularStudents")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_session_regular_students_sessions_session_id");

                    b.HasOne("TeachPanel.Core.Models.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_session_regular_students_students_student_id");

                    b.HasOne("TeachPanel.Core.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_session_regular_students_users_user_id");

                    b.Navigation("Session");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Student", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_students_brands_brand_id");

                    b.HasOne("TeachPanel.Core.Models.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_students_groups_group_id");

                    b.HasOne("TeachPanel.Core.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_students_users_user_id");

                    b.Navigation("Brand");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.StudentVisit", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_visits_students_student_id");

                    b.HasOne("TeachPanel.Core.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_student_visits_users_user_id");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.TableLayout", b =>
                {
                    b.HasOne("TeachPanel.Core.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_table_layouts_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Questionnaire", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("TeachPanel.Core.Models.Entities.Session", b =>
                {
                    b.Navigation("SessionHomeworkStudents");

                    b.Navigation("SessionRegularStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
